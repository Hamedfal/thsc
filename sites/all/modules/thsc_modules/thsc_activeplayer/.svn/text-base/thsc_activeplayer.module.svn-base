<?php

/**
 * @file
 * Implements the basic functionality required to create and display a player in THSC.
 */
function thsc_activeplayer_entity_info() {
  $info['thsc_activeplayer'] = array(
    'label' => t('Player Seasonal Information'),
    'controller class' => 'ThscActivePlayerController',
    'base table' => 'thsc_activeplayer',
    'label callback' => 'entity_class_label',
    'uri callback' => 'thsc_activeplayer_uri',
    'fieldable' => FALSE,
    'entity keys' => array(
      'id' => 'apid',
      'bundle' => 'bundle_type'
    ),
    'bundle keys' => array(
      'bundle' => 'bundle_type'
    ),
    'static cache' => FALSE,
    'bundles' => array(
      'thsc_activeplayer' => array(
        'label' => 'Player Seasonal Info',
        'admin' => array(
          'path' => 'admin/structure/thsc_activeplayer/manage',
          'access arguments' => array(
            'administer thsc_player'
          ) // uses same permissions as thsc_player module
                )
      )
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('THSC Seasonal Players'),
        'custom settings' => FALSE
      )
    )
  );

  return $info;
}

function thsc_activeplayer_uri($player) {
  return array(
    'path' => 'thsc_activeplayer/' . $player->apid
  );
}

function thsc_activeplayer_load($apid = NULL, $reset = FALSE) {
  $apids = (isset($apid) ? array(
    $apid
  ) : FALSE);
  $player = thsc_activeplayer_load_multiple($apids, $reset);
  return $player ? reset($player) : FALSE;
}

function thsc_activeplayer_load_multiple($apids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('thsc_activeplayer', $apids, $conditions, $reset);
}

function thsc_activeplayer_menu() {
  $item['thsc_activeplayer'] = array(
    'title' => 'THSC Players',
    'page callback' => 'thsc_activeplayer_info',
    'access arguments' => array(
      'administer thsc_player'
    )
  );

  $items['admin/config/thsc_activeplayer'] = array(
    'title' => 'THSC Settings',
    'description' => 'Configuration for THSC.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'thsc_activeplayer_config'
    ),
    'access arguments' => array(
      'administer users'
    ),
    'type' => MENU_NORMAL_ITEM
  );

  $items['admin/structure/thsc_activeplayer/manage'] = array(
    'title' => 'THSC Seasonal Players',
    'description' => 'Players who have registered for current season',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'thsc_activeplayer_list_players'
    ),
    'access arguments' => array(
      'administer thsc_player'
    )
  );

  $items['admin/structure/thsc_activeplayer/manage/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK
  );

  $items['thsc_activeplayer/%thsc_activeplayer'] = array(
    'title' => 'THSC Seasonal Player',
    'page callback' => 'thsc_activeplayer_view',
    'page arguments' => array(
      1
    ),
    'access arguments' => array(
      'administer thsc_player',
    ),
    'type' => MENU_CALLBACK
  );

  $items['thsc_activeplayer/%thsc_activeplayer/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK
  );

  $items['thsc_activeplayer/%thsc_activeplayer/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'thsc_activeplayer_form',
      1
    ),
    'access arguments' => array(
      'administer thsc_player'
    ),
    'type' => MENU_LOCAL_TASK
  );

  $items['thsc_activeplayer/%thsc_activeplayer/group/autoassign'] = array(
    'title' => 'Automatically Find a Group',
    'page callback' => 'thsc_activeplayer_autoassign_group',
    'page arguments' => array(
      1
    ),
    'access arguments' => array(
      'administer thsc_player'
    ),
    'type' => MENU_LOCAL_TASK
  );

  $items['thsc_activeplayer/autocomplete/all'] = array(
    'title' => 'Auto Complete for Active Players in Groups',
    'page callback' => 'thsc_activeplayer_autocomplete_all',
    'access arguments' => array(
      'administer thsc_player'
    ),
    'type' => MENU_CALLBACK
  );

  $items['thsc_activeplayer/autocomplete/group/%'] = array(
    'title' => 'Auto Complete for Active Players in a Group',
    'page callback' => 'thsc_activeplayer_autocomplete_group',
    'page arguments' => array(
      3
    ),
    'access arguments' => array(
      'administer thsc_player'
    ),
    'type' => MENU_CALLBACK
  );

  return $items;
}

function thsc_activeplayer_config($form, &$form_state) {
  $form['thsc_child_product_nid_1'] = array(
    '#type' => 'textfield',
    '#title' => 'Node ID of First Child Fee',
    '#description' => 'The node id of the product item that is related to first child membership fee',
    '#size' => 10,
    '#maxlength' => 10,
    '#default_value' => variable_get('thsc_child_product_nid_1', 0)
  );

  $form['thsc_child_product_nid_2'] = array(
    '#type' => 'textfield',
    '#title' => 'Node ID of Second Child Fee',
    '#description' => 'The node id of the product item that is related to second child membership fee',
    '#size' => 10,
    '#maxlength' => 10,
    '#default_value' => variable_get('thsc_child_product_nid_2', 0)
  );

  $form['thsc_child_product_nid_3'] = array(
    '#type' => 'textfield',
    '#title' => 'Node ID of Third Child Fee',
    '#description' => 'The node id of the product item that is related to third (or more) child membership fee',
    '#size' => 10,
    '#maxlength' => 10,
    '#default_value' => variable_get('thsc_child_product_nid_3', 0)
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save settings')
  );

  return $form;
}

function thsc_activeplayer_config_submit($form, &$form_state) {
  variable_set('thsc_child_product_nid_1', $form_state['values']['thsc_child_product_nid_1']);
  variable_set('thsc_child_product_nid_2', $form_state['values']['thsc_child_product_nid_2']);
  variable_set('thsc_child_product_nid_3', $form_state['values']['thsc_child_product_nid_3']);
  drupal_set_message(t('The settings have been saved'));
}

function thsc_activeplayer_info() {
  return ('Welcome to the administration page for THSC Players!');
}

function thsc_activeplayer_list_players($form, &$form_state, $order = 'last_name', $g_id = -1, $t_id = 0) {
  $current_seasonid = variable_get('thsc_active_season', 0);
  if (!$current_seasonid) {
    return "There is no ACTIVE season at this moment!";
  }

  $form['order'] = array(
    '#type' => 'value',
    '#value' => $order,
  );

  $options = array(
  	'-1' => '(All Groups)',
    '0' => '(Players with No Group Assigned)',
  );
  $groups = thsc_group_load_multiple();
  foreach ($groups as $group) {
    $options[$group->group_id] = $group->group_name;
  }

  if (isset($form_state['values'])) {
    $filter_group_id = isset($form_state['values']['filter_group_id']) ? $form_state['values']['filter_group_id'] : -1;
    $filter_team_id = isset($form_state['values']['section_a']['filter_team_id']) ? $form_state['values']['section_a']['filter_team_id'] : 0;
  }
  else {
    $filter_group_id = $g_id;
    $filter_team_id = $t_id;
  }

  $form['filter_group_id'] = array(
    '#type' => 'select',
    '#title' => 'Filter By Group',
    '#options' => $options,
    '#default_value' => $filter_group_id,
    '#ajax' => array(
      'wrapper' => 'section-a-div',
      'callback' => 'thsc_activeplayer_list_players_callback',
    ),
    '#weight' => -20,
  );

  $form['section_a'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="section-a-div">',
    '#suffix' => '</div>',
    '#tree' => 1,
    '#weight' => -15,
    '#markup' => ''
  );

  $teams_options = array(
  	0 => '(All Teams)',
  );
  if ($filter_group_id > 0) {
    $teams = thsc_team_load_multiple(FALSE, array('group_id' => $filter_group_id));
    foreach ($teams as $team) {
      $teams_options[$team->team_id] = $team->team_name;
    }
    //make sure the old value of $filter_team_id is valid (if group id is changed, it might not be vaild anymore)
    if (($filter_team_id > 0) && !array_key_exists($filter_team_id, $teams_options)) {
      $filter_team_id = 0;
      if (isset($form_state['values'])) {
        $form_state['values']['section_a']['filter_team_id'] = 0;
      }
    }
  }
  $form['section_a']['filter_team_id'] = array(
  	'#type' => 'select',
    '#title' => 'Filter By Team',
    '#options' => $teams_options,
    '#default_value' => $filter_team_id,
    '#ajax' => array(
  	  'wrapper' => 'activeplayers-div',
      'callback' => 'thsc_activeplayer_list_players_table_callback',
    ),
    '#weight' => -15,
  );
  if ($filter_group_id <= 0) {
    $form['section_a']['filter_team_id']['#access'] = FALSE;
  }

  $form['section_a']['section_b'] = array(
  	'#type' => 'markup',
    '#prefix' => '<div id="activeplayers-div">',
    '#suffix' => '</div>',
    '#tree' => 1,
    '#weight' => -12,
    '#markup' => '',
  );

  $query = db_select('thsc_activeplayer', 'a');
  $query->condition('a.season_id', $current_seasonid, '=');
  $query->join('thsc_player', 'p', 'a.player_id = p.player_id');
  $query->leftJoin('thsc_team', 't', 'a.team_id = t.team_id');
  $query->leftJoin('thsc_group', 'g', 'a.group_id = g.group_id');
  $query->fields('a', array(
  	'player_id',
    'apid',
    'team_id',
    'group_id',
    'payment_made',
  ));
  $query->fields('p', array(
    'first_name',
    'last_name',
    'gender',
    'birthdate',
  ));
  $query->fields('t', array('team_name'));
  $query->fields('g', array('group_name'));
  if ($filter_group_id > -1) {
    $query->condition('a.group_id', $filter_group_id, '=');
    if (($filter_group_id > 0) && ($filter_team_id > 0)) {
      $query->condition('a.team_id', $filter_team_id, '=');
    }
  }
  $query->orderBy($order);
  $players = $query->execute();
  $count = 0;
  if (!empty($players)) {
    foreach ($players as $player) {
      if (!$player->group_id) {
        $player->group_info = '(no group)';
      }
      else {
        $player->group_info = l($player->group_name, 'thsc_group/' . $player->group_id);
      }
      if (!$player->team_id) {
        $player->team_info = '(no team)';
      }
      else {
        $player->team_info = l($player->team_name, 'thsc_team/' . $player->team_id);
      }
      $count++;
      $rows[$player->apid] = array(
        'first_name' => l($player->first_name, 'thsc_player/' . $player->player_id),
        'last_name' => l($player->last_name, 'thsc_player/' . $player->player_id),
        'age' => thsc_player_calculate_age($player->birthdate),
        'gender' => $player->gender == 'M' ? 'Boy' : 'Girl',
        'payment' => l(($player->payment_made == 1) ? 'PAID' : 'not paid', 'thsc_activeplayer/' . $player->apid),
        'group' => $player->group_info,
        'team' => $player->team_info,
      );
    }

    $header = array(
    	'first_name' => l('First Name', 'admin/structure/thsc_activeplayer/manage/first_name/' . $filter_group_id . '/' . $filter_team_id),
    	'last_name' => l('Last Name', 'admin/structure/thsc_activeplayer/manage/last_name/' . $filter_group_id . '/' . $filter_team_id),
      'age' => l('Age', 'admin/structure/thsc_activeplayer/manage/birthdate/' . $filter_group_id . '/' . $filter_team_id),
      'gender' => l('Gender', 'admin/structure/thsc_activeplayer/manage/gender/' . $filter_group_id . '/' . $filter_team_id),
      'payment' => l('Paid?', 'admin/structure/thsc_activeplayer/manage/payment_made/' . $filter_group_id . '/' . $filter_team_id),
      'group' => l('Group', 'admin/structure/thsc_activeplayer/manage/group_id/' . $filter_group_id . '/' . $filter_team_id),
      'team' => l('Team', 'admin/structure/thsc_activeplayer/manage/team_id/' . $filter_group_id . '/' . $filter_team_id),
    );

    if ($count > 0) {
      $form['section_a']['section_b']['auto_assign'] = array(
      	'#theme' => 'thsc_link',
        '#value' => l('Auto Assign?', 'thsc_group/autoassign', array(
      	  'attributes' => array(
        	  'class' => 'active'
          ),
        )),
        '#weight' => 10,
      );
      $form['section_a']['section_b']['player_count'] = array(
      	'#type' => 'markup',
        '#markup' => 'Total Number of Players' . $count,
        '#weight' => 8,
      );
    }

    $form['section_a']['section_b']['activeplayers_table'] = array(
    	'#type' => 'tableselect',
      '#header' => $header,
      '#options' => $rows,
      '#weight' => 12,
    );

    $target_groups = thsc_group_load_multiple();
    $target_options[0] = '-Remove From Group';
    foreach ($target_groups as $group) {
      $target_options[$group->group_id] = $group->group_name;
    }

    if (isset($form_state['values']['section_a']['section_b']['target_group_id'])) {
      $target_group_id = $form_state['values']['section_a']['section_b']['target_group_id'];
    }
    else {
      $target_group_id = 0;
    }
    if (isset($form_state['values']['section_a']['section_b']['target_section']['target_team_id'])) {
      $target_team_id = $form_state['values']['section_a']['section_b']['target_section']['target_team_id'];
    }
    else {
      $target_team_id = -1;
    }

    $form['section_a']['section_b']['target_group_id'] = array(
      '#type' => 'select',
      '#title' => 'Change Group',
      '#options' => $target_options,
      '#default_value' => $target_group_id,
      '#ajax' => array(
        'wrapper' => 'target-group-div',
        'callback' => 'thsc_activeplayer_list_players_targetgroup_callback',
      ),
      '#weight' => 15,
    );

    $form['section_a']['section_b']['target_section'] = array(
      '#type' => 'markup',
      '#prefix' => '<div id="target-group-div">',
      '#suffix' => '</div>',
      '#tree' => 1,
      '#weight' => 16,
      '#markup' => ''
    );

    $target_team_options = array(
       0 => '-Remove From Team',
    );
    if ($target_group_id > 0) {
      $target_teams = thsc_team_load_multiple(FALSE, array('group_id' => $target_group_id));
      foreach ($target_teams as $target_team) {
        $target_team_options[$target_team->team_id] = $target_team->team_name;
      }
      if (($target_team_id > 0) && (!array_key_exists($target_team_id, $target_team_options))) {
        $target_team_id = -1;
      }
    }
    else if ($target_team_id > 0) {
      $target_team_id = -1;
    }

    $form['section_a']['section_b']['target_section']['target_team_id'] = array(
      '#type' => 'select',
      '#title' => 'Change Team',
      '#options' => $target_team_options,
      '#default_value' => $target_team_id,
    );


    $form['section_a']['section_b']['target_section']['submit_group'] = array(
      '#type' => 'submit',
      '#value' => 'CHANGE GROUP',
      '#submit' => array(
    	  'thsc_activeplayer_list_players_submit_group',
      ),
      '#weight' => 20,
    );
    $form['section_a']['section_b']['target_section']['submit_team'] = array(
      '#type' => 'submit',
      '#value' => 'CHANGE GROUP & TEAM',
      '#submit' => array(
    	  'thsc_activeplayer_list_players_submit_team',
      ),
      '#weight' => 22,
    );
  }
  else {
    // There were no entities. Tell the user.
    $form['section_a']['section_b']['activeplayers_table'] = array(
      '#type' => 'item',
      '#markup' => t('No THSC Seasonal Player Info currently exist!')
    );
  }

  return $form;
}

function thsc_activeplayer_list_players_callback($form, $form_state) {
  return $form['section_a'];
}

function thsc_activeplayer_list_players_table_callback($form, $form_state) {
  return $form['section_a']['section_b'];
}

function thsc_activeplayer_list_players_targetgroup_callback($form, $form_state) {
  return $form['section_a']['section_b']['target_section'];
}

function thsc_activeplayer_list_players_submit_team($form, &$form_state) {
  $current_seasonid = variable_get('thsc_active_season', 0);
  if (!$current_seasonid) {
    return;
  }
  $selected_players_apid = array_filter($form_state['values']['section_a']['section_b']['activeplayers_table']);
  $target_group_id = $form_state['values']['section_a']['section_b']['target_group_id'];
  $target_team_id = $form_state['values']['section_a']['section_b']['target_section']['target_team_id'];
  //0 means remove.
  if (count($selected_players_apid) > 0) {
    $query = db_update('thsc_activeplayer');
    $query->condition('season_id', $current_seasonid, '=');
    $query->condition('apid', $selected_players_apid, 'IN');
    $query->fields(array(
    	'group_id' => $target_group_id,
      'team_id' => $target_team_id,
    ));
    $query->execute();
  }
  $filter_group_id = isset($form_state['values']['filter_group_id']) ? $form_state['values']['filter_group_id'] : -1;
  $filter_team_id = isset($form_state['values']['section_a']['filter_team_id']) ? $form_state['values']['section_a']['filter_team_id'] : 0;
  $order = isset($form_state['values']['order']) ? $form_state['values']['order'] : '';
  $form_state['redirect'] = 'admin/structure/thsc_activeplayer/manage/' . $order . '/' . $filter_group_id . '/' . $filter_team_id;
}

function thsc_activeplayer_list_players_submit_group($form, &$form_state) {
  $current_seasonid = variable_get('thsc_active_season', 0);
  if (!$current_seasonid) {
    return;
  }
  $selected_players_apid = array_filter($form_state['values']['section_a']['section_b']['activeplayers_table']);
  $target_group_id = $form_state['values']['section_a']['section_b']['target_group_id'];
  //0 means remove.
  if (count($selected_players_apid) > 0) {
    $query = db_update('thsc_activeplayer');
    $query->condition('season_id', $current_seasonid, '=');
    $query->condition('apid', $selected_players_apid, 'IN');
    $query->fields(array(
    	'group_id' => $target_group_id,
    ));
    $query->execute();
  }
  $filter_group_id = isset($form_state['values']['filter_group_id']) ? $form_state['values']['filter_group_id'] : -1;
  $filter_team_id = isset($form_state['values']['section_a']['filter_team_id']) ? $form_state['values']['section_a']['filter_team_id'] : 0;
  $order = isset($form_state['values']['order']) ? $form_state['values']['order'] : 'last_name';
  $form_state['redirect'] = 'admin/structure/thsc_activeplayer/manage/' . $order . '/' . $filter_group_id . '/' . $filter_team_id;
}

function thsc_activeplayer_view($player, $view_mode = 'full') {
  $entity_type = 'thsc_activeplayer';
  $player->content = array();

  field_attach_prepare_view($entity_type, array(
    $player->player_id => $player
  ), $view_mode);
  entity_prepare_view($entity_type, array(
    $player->player_id => $player
  ));
  $player->content += field_attach_view($entity_type, $player, $view_mode);

  $player->content['apid'] = array(
    '#type' => 'markup',
    '#markup' => 'Player ID = ' . $player->apid . '<br />',
    '#weight' => -22
  );
  $player->content['player_id'] = array(
    '#type' => 'markup',
    '#markup' => l('Member ID = ' . $player->player_id, 'thsc_player/' . $player->player_id) . '<br />',
    '#weight' => -20
  );
  $player->content['season_id'] = array(
    '#type' => 'markup',
    '#markup' => 'Season ID = ' . $player->season_id . '<br />',
    '#weight' => -18
  );
  $player->content['team_id'] = array(
    '#type' => 'item',
    '#title' => t('Team ID'),
    '#markup' => $player->team_id,
    '#weight' => -10
  );
  $player->content['group_id'] = array(
    '#type' => 'item',
    '#title' => t('Group ID'),
    '#markup' => $player->group_id ? $player->group_id : l('Auto Assign', 'thsc_activeplayer/' . $player->apid . '/group/autoassign'),
    '#weight' => -8
  );
  $player->content['registered_at'] = array(
    '#type' => 'item',
    '#title' => t('Registered At'),
    '#markup' => format_date($player->registered_at),
    '#weight' => -4
  );
  $player->content['payment_made'] = array(
    '#type' => 'item',
    '#title' => t('Payment Made?'),
    '#markup' => ($player->payment_made ? 'YES' : 'NO'),
    '#weight' => -2
  );
  global $language;
  $langcode = $language->language;
  module_invoke_all('entity_view', $player, $entity_type, $view_mode, $langcode);
  drupal_alter(array(
    'thsc_activeplayer_view',
    'entity_view'
  ), $player->content, $entity_type);

  return $player->content;
}

function thsc_activeplayer_field_extra_fields() {
  $return = array();
  $return['thsc_activeplayer']['thsc_activeplayer'] = array(
    'form' => array(
      'player_id' => array(
        'label' => 'Player ID',
        'weight' => -10
      ),
      'season_id' => array(
        'label' => 'Season ID',
        'weight' => -5
      )
    )
  );

  return $return;
}

function thsc_activeplayer_form($form, &$form_state, $player) {
  $form['payment_made'] = array(
    '#type' => 'checkbox',
    '#title' => 'Payment Made?',
    '#required' => FALSE,
    '#default_value' => $player->payment_made
  );
  $form['player'] = array(
    '#type' => 'value',
    '#value' => $player
  );

  field_attach_form('thsc_activeplayer', $player, $form, $form_state);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 100
  );
  if (!empty($player->apid) && user_access('administer thsc_activeplayer')) {
    $form['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#submit' => array(
        'thsc_activeplayer_form_delete'
      ),
      '#weight' => 120
    );
  }

  return $form;
}

function thsc_activeplayer_form_validate($form, &$form_state) {
  field_attach_form_validate('thsc_activeplayer', $form_state['values']['player'], $form, $form_state);
}

function thsc_activeplayer_form_submit($form, &$form_state) {
  $player = $form_state['values']['player'];
  $player->payment_made = $form_state['values']['payment_made'];
  field_attach_submit('thsc_activeplayer', $player, $form, $form_state);
  $player = thsc_activeplayer_save($player);
  $form_state['redirect'] = "thsc_activeplayer/$player->apid";
}

function thsc_activeplayer_save(&$player) {
  return entity_get_controller('thsc_activeplayer')->save($player);
}

function thsc_activeplayer_form_delete($form, &$form_state) {
  $player = $form_state['values']['player'];
  entity_get_controller('thsc_activeplayer')->delete($player);
  drupal_set_message(t('The Seasonal Player (ID %id) has been deleted', array(
    '%id' => $player->apid
  )));
  $form_state['redirect'] = '';
}

function thsc_activeplayer_autoassign_group($activeplayer) {
  if ($activeplayer->group_id) {
    drupal_set_message('This player is already assigned to a group!');
  }
  else {
    $groups = thsc_group_load_multiple();
    $player = thsc_player_load($activeplayer->player_id);
    $age = thsc_player_calculate_age($player->birthdate);
    // search for appropriate group:
    foreach ($groups as $group) {
      if (($group->start_age <= $age) && ($age <= $group->end_age) && thsc_group_match_gender2group($group->gender_type, $player->gender)) {
        db_query('UPDATE {thsc_activeplayer} SET group_id = :group_id WHERE apid = :apid', array(
          ':group_id' => $group->group_id,
          ':apid' => $activeplayer->apid
        ));
        $activeplayer->group_id = $group->group_id;
        drupal_set_message('Player was assigned to ' . $group->group_name);
      }
    }
    // if the group_id is still zero, it means that we have not found an appropriate group
    if ($activeplayer->group_id == 0) {
      drupal_set_message('No group could be matched to this player.', 'warning');
    }
  }
  drupal_goto('thsc_activeplayer/' . $activeplayer->apid);
}

function thsc_activeplayer_autocomplete_all($string) {
  $current_seasonid = variable_get('thsc_active_season', 0);
  $rows = array();
  if ($current_seasonid) {
    $query = db_select('thsc_activeplayer', 'ap');
    $query->join('thsc_player', 'p', 'p.player_id = ap.player_id');
    $query->leftJoin('thsc_group', 'g', 'ap.group_id = g.group_id');
    $query->condition('ap.season_id', $current_seasonid, '=');
    $query->condition(db_or()->condition('p.first_name', '%' . db_like($string) . '%', 'LIKE')->condition('p.last_name', '%' . db_like($string) . '%', 'LIKE'));
    $query->fields('ap', array(
      'apid'
    ))->fields('p', array(
      'first_name',
      'last_name'
    ))->fields('g', array(
      'group_name'
    ));

    $result = $query->execute();
    foreach ($result as $rec) {
      $rows[$rec->apid] = $rec->first_name . ' ' . $rec->last_name;
      if ($rec->group_name) {
        $rows[$rec->apid] .= ', "' . $rec->group_name . '"';
      }
      else {
        $rows[$rec->apid] .= ', (no group)';
      }
    }
  }
  drupal_json_output($rows);
}

function thsc_activeplayer_autocomplete_group($group_id, $string) {
  $group = thsc_group_load($group_id);
  $current_seasonid = variable_get('thsc_active_season', 0);
  $rows = array();
  if ((!empty($group)) && ($current_seasonid)) {
    $query = db_select('thsc_activeplayer', 'ap');
    $query->join('thsc_player', 'p', 'p.player_id = ap.player_id');
    $query->leftJoin('thsc_team', 't', 'ap.team_id = t.team_id');
    $query->condition('ap.season_id', $current_seasonid, '=');
    $query->condition('ap.group_id', $group_id, '=');
    $query->condition(db_or()->condition('p.first_name', '%' . db_like($string) . '%', 'LIKE')->condition('p.last_name', '%' . db_like($string) . '%', 'LIKE'));
    $query->fields('ap', array(
      'apid'
    ))->fields('p', array(
      'first_name',
      'last_name'
    ))->fields('t', array(
      'team_name'
    ));

    $result = $query->execute();
    foreach ($result as $rec) {
      $rows[$rec->apid] = $rec->first_name . ' ' . $rec->last_name;
      if ($rec->team_name) {
        $rows[$rec->apid] .= ', "' . $rec->team_name . '"';
      }
      else {
        $rows[$rec->apid] .= ', (no team)';
      }
    }
  }
  drupal_json_output($rows);
}

/**
 * Returns an array of a parent's children's player ids
 *
 * @param array $parent_uid
 */
function thsc_activeplayer_children_playerids($parent_uid) {
  $cmd = 'SELECT y.player_id FROM field_data_field_parent p INNER JOIN thsc_player y ON p.entity_id = y.player_id ';
  $cmd .= "WHERE p.entity_type = 'thsc_player' AND p.bundle = 'thsc_player' ";
  $cmd .= 'AND p.field_parent_target_id = :parent_uid ';
  $result = db_query($cmd, array(
    ':parent_uid' => $parent_uid
  ));
  return $result->fetchCol(0);
}

/**
 * Returns the membership fee based on the Ubercart products.
 * Each product is related to
 * first, second or third (or more) child and the relationship is defined in THSC settings page.
 *
 * @param int $child_no
 * @return number
 */
function thsc_activeplayer_membership_fee($child_no) {
  switch ($child_no) {
    case 1 :
      $nid = variable_get('thsc_child_product_nid_1', 0);
      break;
    case 2 :
      $nid = variable_get('thsc_child_product_nid_2', 0);
      break;
    default :
      $nid = variable_get('thsc_child_product_nid_3', 0);
      break;
  }
  if (!empty($nid)) {
    $product = node_load($nid);
    if ($product->type == 'product') {
      return $product->sell_price;
    }
  }
  return 0;
}

/**
 * Returns a table element of seasonal history of a player.
 */
function thsc_activeplayer_playerload($player_id) {
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node', '=')
    ->entityCondition('bundle', 'season', '=')
    ->propertyCondition('status', 1, '=')
    ->fieldOrderBy('field_start_date', 'value', 'DESC');
  $result = $query->execute();
  $seasons = entity_load('node', array_keys($result['node']));
  $rows = array();
  foreach ($seasons as $nid => $season) {
    $q2 = new EntityFieldQuery();
    $q2->entityCondition('entity_type', 'thsc_activeplayer', '=')
      ->entityCondition('bundle', 'thsc_activeplayer', '=')
      ->propertyCondition('season_id', $nid, '=')
      ->propertyCondition('player_id', $player_id, '=');
    $r2 = $q2->execute();
    if (!empty($r2)) {
      #there should be one item in this array
      $apids = array_keys($r2['thsc_activeplayer']);
      $apid = $apids[0];
      $activeplayer = thsc_activeplayer_load($apid);
      if ($activeplayer->team_id) {
        $team = thsc_team_load($activeplayer->team_id);
        $team_data = $team->team_name;
        $wrapper = entity_metadata_wrapper('node', $season);
        if ($wrapper->field_active_season->value() == 1) {
          $team_data = l($team_data, 'thsc_game/teamschedule/' . $activeplayer->team_id . '/print/full');
        }
      }
      else {
        $team_data = '-';
      }
      if ($activeplayer->group_id) {
        $group = thsc_group_load($activeplayer->group_id);
        $group_data = $group->group_name;
      }
      else {
        $group_data = '';
      }
      $rows[] = array(
      	'data' => array(
      	  'season' => $season->title,
      	  'register' => format_date($activeplayer->registered_at),
      	  'team' => $team_data,
      	  'group' => $group_data,
      	  'payment_made' => (($activeplayer->payment_made == 1) ? 'Paid' : '(Not Paid)'),
        ),
      );
    }
    else {
      #when there is no activeplayer, only if this is an active season we will create a row
      $wrapper = entity_metadata_wrapper('node', $season);
      if (($wrapper->field_active_season->value() == 1) && ($wrapper->field_registering->value() == 1)) {
        $rows[] = array(
        	'data' => array(
        	  'season' => $season->title,
        	  'register' => l('(not registered)', 'thsc_player/register/' . $player_id),
        	  'team' => '-',
        	  'group' => '-',
        	  'payment_made' => '-',
          ),
        );
      }
    }
  }

  $element = array(
  	'#theme' => 'table',
    '#rows' => $rows,
    '#header' => array(
      'Season',
      'Registered',
      'Team',
      'Group',
      'Payment',
    ),
  );

  return $element;
}